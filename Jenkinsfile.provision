pipeline {
  agent { label 'linux' }
  environment {
    AWS_CRED = credentials('AWS_CRED') // use as env.AWS_ACCESS_KEY_ID etc. if plugin not present, pass via aws cli profile
    SSH_KEY_ID = 'SSH_KEY_ID'          // credential id for later use
  }
  triggers {
    // webhook configured in Git to trigger this pipeline on push to main
  }
  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Terraform Init') {
      steps {
        dir('terraform') {
          // ensure terraform CLI is available on agent
          sh '''
            terraform init -input=false
          '''
        }
      }
    }

    stage('Terraform Apply') {
      steps {
        dir('terraform') {
          // Pass variables via env or var file
          sh '''
            terraform apply -auto-approve \
              -var "aws_region=us-east-2" \
              -var "ami_id=${AMI_ID}" \
              -var "instance_type=t3.micro" \
              -var "key_name=${TF_KEY_NAME}"
          '''
        }
      }
    }

    stage('Get public IP') {
      steps {
        dir('terraform') {
          script {
            def ip = sh(script: "terraform output -raw public_ip", returnStdout: true).trim()
            echo "Provisioned instance IP: ${ip}"
            // expose to downstream as build param via build step or use Jenkins parameterized trigger
            // We'll trigger deploy pipeline and pass EC2_IP
            env.EC2_IP = ip
          }
        }
      }
    }

    stage('Wait for SSH') {
      steps {
        script {
          // wait for SSH up (simple loop)
          sh '''
            for i in $(seq 1 30); do
              nc -z -w3 ${EC2_IP} 22 && exit 0 || sleep 5
            done
            echo "SSH did not open in time"; exit 1
          '''
        }
      }
    }

    stage('Run Ansible to install Docker') {
      steps {
        // Use SSH private key credentials to run ansible
        withCredentials([sshUserPrivateKey(credentialsId: "${SSH_KEY_ID}", keyFileVariable: 'KEYFILE', usernameVariable: 'SSH_USER')]) {
          sh """
            # create inventory
            echo '${EC2_IP} ansible_user=${SSH_USER} ansible_ssh_private_key_file=${KEYFILE}' > inventory.cfg

            # Run the playbook (assumes ansible installed on agent)
            ansible-playbook -i inventory.cfg ../ansible/playbook.yml -u ${SSH_USER} --private-key ${KEYFILE} -o
          """
        }
      }
    }

    stage('Trigger Deploy Pipeline') {
      steps {
        // Trigger Pipeline 2 and pass EC2_IP as a parameter
        build job: 'deploy-job', parameters: [string(name: 'EC2_IP', value: env.EC2_IP)]
      }
    }
  }

  post {
    failure {
      echo "Provision pipeline failed"
    }
  }
}
